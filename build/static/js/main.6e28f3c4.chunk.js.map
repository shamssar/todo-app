{"version":3,"sources":["components/hooks/form.js","components/context/settings/context.js","components/todo/todo.js","app.js","index.js"],"names":["useForm","callback","useState","values","setValues","handleChange","event","persist","console","log","target","name","value","handleSubmit","preventDefault","SettingsContext","React","createContext","Settings","props","hide","setHide","numItems","setNumItems","sort","setSort","Provider","children","ToDo","list","setList","incomplete","setIncomplete","item","id","uuid","complete","settings","useContext","startIdx","setStartIdx","endIdx","setEndIdx","useEffect","incompleteCount","filter","length","onSubmit","onChange","type","placeholder","defaultValue","min","max","data","slice","pagination","map","text","assignee","difficulty","onClick","items","toggleComplete","toString","deleteItem","App","Component","Main","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.6e28f3c4.chunk.js","sourcesContent":["import { useState } from 'react';\n\nconst useForm = callback => {\n\n  const [values, setValues] = useState({});\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    callback(values);\n  };\n\n  const handleChange = event => {\n    event.persist();\n    console.log('CHANGE', event.target.name);\n    setValues(values => ({\n      ...values,\n      [event.target.name]: event.target.value,\n    }));\n  };\n\n\n  return {\n    handleChange,\n    handleSubmit,\n    values,\n  };\n};\n\nexport default useForm;","import React, { useState } from 'react';\n\nexport const SettingsContext = React.createContext();\n\nfunction Settings(props) {\n  let [hide, setHide] = useState(false);\n  let [numItems, setNumItems] = useState(3);\n  let [sort, setSort] = useState('');\n\n  return (\n    <SettingsContext.Provider\n      value={{ hide, numItems, sort, setHide, setNumItems, setSort }}\n    >\n      {props.children}\n    </SettingsContext.Provider>\n  );\n}\n\nexport default Settings;","import React, { useEffect, useState, useContext } from 'react';\nimport useForm from '../hooks/form';\n\nimport { v4 as uuid } from 'uuid';\nimport { Button, Label, Switch,Card,Elevation } from '@blueprintjs/core';\nimport { SettingsContext } from '../context/settings/context';\n\nconst ToDo = () => {\n\n  const [list, setList] = useState([]);\n  const [incomplete, setIncomplete] = useState([]);\n  const { handleChange, handleSubmit } = useForm(addItem);\n\n  const settings = useContext(SettingsContext);\n  const [startIdx, setStartIdx] = useState(0);\n  const [endIdx, setEndIdx] = useState(settings.numItems);\n\n\n  function addItem(item) {\n    console.log(item);\n    item.id = uuid();\n    item.complete = false;\n    setList([...list, item]);\n  }\n  function deleteItem(id) {\n    const items = list.filter(item => item.id !== id);\n    setList(items);\n  }\n\n  function toggleComplete(id) {\n\n    const items = list.map(item => {\n      if (item.id == id) {\n        item.complete = !item.complete;\n      }\n      return item;\n    });\n\n    setList(items);\n\n  }\n  useEffect(() => {\n    let incompleteCount = list.filter(item => !item.complete);\n    setIncomplete(incompleteCount);\n    //document.title = `To Do List: ${incomplete.length}`;\n  }, [list]);\n  function handleHide() {\n    settings.setHide(!settings.hide);\n  }\n\n  function pagination() {\n    let data = incomplete.slice(startIdx, endIdx);\n    console.log(data, startIdx, endIdx);\n    return data;\n  }\n   \n\n  function handleNext() {\n    if (endIdx <= incomplete.length) {\n      setStartIdx(startIdx + settings.numItems);\n      setEndIdx(endIdx + settings.numItems);\n    }\n  }\n  function handlePrevious() {\n    if (startIdx > 0) {\n      setStartIdx(startIdx - settings.numItems);\n      setEndIdx(endIdx - settings.numItems);\n    }\n  }\n\n  \n\n  useEffect(() => {\n    setStartIdx(0);\n    setEndIdx(settings.numItems);\n  }, [settings.numItems]);\n\n  \n  return (\n    <>\n      <header>\n        <h1>To Do List: {incomplete.length} items pending</h1>\n      </header>\n\n      <form onSubmit={handleSubmit}>\n\n        <h2>Add To Do Item</h2>\n<label>\n          <span>To Do Item</span>\n          <input\n            onChange={handleChange}\n            name=\"text\"\n            type=\"text\"\n            placeholder=\"Item Details\"\n          />\n       </label>\n\n        <Label>\n          <span>Assigned To</span>\n          <input\n            onChange={handleChange}\n            name=\"assignee\"\n            type=\"text\"\n            placeholder=\"Assignee Name\"\n          />\n        </Label>\n\n        <Label>\n          <span>Difficulty</span>\n         \n          <input\n            onChange={handleChange}\n            defaultValue={3}\n            type=\"range\"\n            min={1}\n            max={5}\n            name=\"difficulty\"\n          />\n        </Label>\n\n        <Label>\n          <Button type=\"submit\">Add Item</Button>\n        </Label>\n\n        <Label>\n          <Switch onChange={handleHide}> Hide Completed Tasks </Switch>\n        </Label>\n      \n      </form>\n\n      \n      {pagination().map(item => (\n\n<div key={item.id}>\n         {settings.hide === false || item.complete === false ? (\n            <>\n              <p>Item: {item.text}</p>\n              <p>\n                <small>Assigned to: {item.assignee}</small>\n              </p>\n              <p>\n                <small>Difficulty: {item.difficulty}</small>\n              </p>\n              <div onClick={() => toggleComplete(item.id)}>\n                Complete: {item.complete.toString()}\n              </div>\n              <hr />\n              <Button onClick={() => deleteItem(item.id)}>Delete</Button>\n            </>\n          ) : null}\n        </div>\n      ))}\n  <Button onClick={handlePrevious}>Previous</Button>\n      <Button onClick={handleNext}>NEXT</Button>\n    </>\n  );\n};\n\nexport default ToDo; ","import React from 'react';\nimport ToDo from './components/todo/todo';\nimport Settings from './components/context/settings/context';\nimport '@blueprintjs/core/lib/css/blueprint.css';\n\nexport default class App extends React.Component {\n  render() {\n    return (\n     \n      <Settings>\n        <ToDo />\n      </Settings>\n    );\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './app.js';\n\nclass Main extends React.Component {\n  render() {\n    return <App />;\n  }\n}\n\nconst rootElement = document.getElementById('root');\nReactDOM.render(<Main />, rootElement);\n"],"sourceRoot":""}