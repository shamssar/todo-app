{"version":3,"sources":["hooks/form.js","context/settings/settings.js","components/List.js","components/Form.js","components/Completed.js","components/todo.js","context/settings/Form.js","components/Header.js","components/Footer.js","app.js","index.js"],"names":["useForm","callback","useState","values","setValues","handleChange","event","persist","target","name","value","handleSubmit","preventDefault","reset","settingsContext","React","createContext","settings","props","itemsPerPage","setItemsPerPage","sort","setSort","state","show","setShow","useEffect","stringArray","localStorage","getItem","objectArray","JSON","parse","Number","clear","Provider","children","List","useContext","currentPage","setCurrentPage","list","incomplete","slice","activeList","setactiveList","Math","ceil","length","pagesNum","setPagesNum","start","end","changePage","pageNum","Pages","pagesArr","push","class","type","onClick","i","className","console","log","map","item","interactive","elevation","Elevation","THREE","text","assignee","difficulty","complete","toggleComplete","id","toString","deleteItem","intent","Form","onSubmit","labelFor","labelInfo","onChange","placeholder","defaultValue","min","max","completed","Completecard","arrayComplete","ToDo","setList","setIncomplete","uuid","handleSubmit2","completedItem","setComplete","setArrayComplete","changeSet","setChangeSetting","items","incompleteCount","filter","document","title","arr","ele","changeSettingContext","FormSetting","changeNumberOfpage","e","obj","setItem","stringify","label","helperText","Header","Group","Heading","Divider","Footer","App","Main","Component","rootElement","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.a11681e6.chunk.js","sourcesContent":["import { useState } from 'react';\n\nconst useForm = (callback) => {\n\n  const [values, setValues] = useState({});\n\n  const handleSubmit = (event) => {\n    if (event) event.preventDefault();\n    callback(values);\n    event.target.reset();\n  };\n\n  const handleChange = (event) => {\n    event.persist();\n    setValues(values => ({ ...values, [event.target.name]: event.target.value }));\n  };\n\n  return {\n    handleChange,\n    handleSubmit,\n    values,\n  };\n};\n\nexport default useForm;","import React, { useState, useEffect } from 'react';\nexport const settingsContext = React.createContext();\n\nexport default function settings(props) {\n  const [itemsPerPage, setItemsPerPage] = useState(2);\n  const [sort, setSort] = useState('Ascending');\n  const [show, setShow] = useState(false);\n  const state = { show, setShow, itemsPerPage, setItemsPerPage, sort, setSort, }; \n  useEffect(() => { let stringArray = localStorage.getItem(\"Form\"); \n  let objectArray = JSON.parse(stringArray); \n  if (objectArray) { setItemsPerPage(Number(objectArray.itemsPerPage)); } \n  localStorage.clear(); }, []);\n\n  return <settingsContext.Provider value={state}>{props.children}</settingsContext.Provider>;\n}","import React, { useContext, useState, useEffect } from 'react';\nimport { settingsContext } from '../context/settings/settings';\nimport { Button, Card, Elevation } from '@blueprintjs/core';\n\n\nexport default function List(props) {\n  const settings = useContext(settingsContext);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [activeList, setactiveList] = useState(\n    (settings.show ? props.list : props.incomplete).slice(\n      0, settings.itemsPerPage)\n  );\n  const [pagesNum, setPagesNum] = useState(\n    Math.ceil(props.list.length / settings.itemsPerPage)\n  );\n\n  useEffect(() => {\n    setactiveList(\n      (settings.show ? props.list : props.incomplete).slice(\n        0,\n        settings.itemsPerPage\n      )\n    );\n\n    setPagesNum(\n      Math.ceil(\n        (settings.show ? props.list : props.incomplete).length /\n          settings.itemsPerPage\n      )\n    );\n  }, [props.list, props.incomplete]);\n\n  useEffect(() => {\n    let start = (currentPage - 1) * settings.itemsPerPage;\n    let end = start + settings.itemsPerPage;\n    setactiveList(\n      (settings.show ? props.list : props.incomplete).slice(start, end)\n    );\n  }, [currentPage, settings.itemsPerPage]);\n\n  const changePage = (pageNum) => {\n    if (pageNum !== currentPage) setCurrentPage(pageNum);\n  };\n\n  const Pages = () => {\n    let pagesArr = [];\n    if (currentPage > 1) {\n      pagesArr.push(\n        <Button\n          class=\"@ns-button\"\n          type=\"button\"\n          onClick={() => {\n            changePage(currentPage - 1);\n          }}\n        >\n          previous\n        </Button>\n      );\n    }\n\n    for (let i = 1; i <= pagesNum; i++) {\n      pagesArr.push(\n        <Button\n          class=\"@ns-button\"\n          type=\"button\"\n          onClick={() => {\n            changePage(i);\n          }}\n          key={i}\n        >\n          {i}\n        </Button>\n      );\n    }\n\n    if (currentPage <= pagesNum) {\n      pagesArr.push(\n        <Button\n          class=\".bp3-active\"\n          type=\"button\"\n          onClick={() => {\n            changePage(currentPage + 1);\n          }}\n        >\n          next\n        </Button>\n      );\n    }\n   \n    return <div className=\"pages\"> {pagesArr} </div>;\n  };\n\n  return (\n    <div>\n    \n      <Card className=\"mainItem2\">\n        <h3 className=\"list\">Items List</h3>\n        {console.log(activeList)}\n        {activeList.map((item) => (\n          <Card\n            className=\"listCard\"\n            interactive={true}\n            elevation={Elevation.THREE}\n            key={item.id}\n          >\n             \n            <h3>\n              <b>{item.text} </b>\n            </h3>\n            <p>\n              <b>Assigned to</b> : {item.assignee}\n            </p>\n            <p>\n              <b>Difficulty</b> : {item.difficulty}\n            </p>\n            <Button\n              class=\"@ns-button\"\n              type=\"button\"\n              // intent=\"danger\"\n              className={\n                item.complete ? 'bp3-intent-success' : 'bp3-intent-danger'\n              }\n              onClick={() => props.toggleComplete(item.id)}\n            >\n              Complete : {item.complete.toString()}\n            </Button>\n            <Button  onClick={() => props.deleteItem(item.id)} type=\"submit\"  intent=\"danger\" text=\"delete\" />\n          </Card>\n        ))}\n      </Card>\n      <Pages />\n    </div>\n  );\n}","import React from 'react';\nimport { Card, Button, FormGroup, InputGroup } from '@blueprintjs/core';\n\nexport default function Form(props) {\n  return (\n    <Card className=\"mainItem\" interactive={true}>\n      <h3 class=\"list\">Add A Task To Your List </h3>\n      <br></br>\n      <form onSubmit={props.handleSubmit}>\n        <FormGroup labelFor=\"text-input\" labelInfo=\"(required)\">\n          <label><b>To Do Item</b></label>\n          <br></br>\n          <br></br>\n          <InputGroup\n            onChange={props.handleChange}\n            name=\"text\"\n            id=\"text-input\"\n            placeholder=\"Item Details\"\n          />\n          <br></br>\n          <label><b>Assigned To</b></label>\n          <br></br>\n          <br></br>\n          <InputGroup\n            onChange={props.handleChange}\n            name=\"assignee\"\n            id=\"text-input\"\n            placeholder=\"Assignee Name\"\n          />\n          <br></br>\n          <div className='diff'>\n            <lable><b>Difficulty</b></lable>\n            <br></br>\n            <input\n              onChange={props.handleChange}\n              defaultValue={2}\n              type=\"range\"\n              min={1}\n              max={10}\n              name=\"difficulty\"\n            />\n          </div>\n          <div >\n            <Button className='button' type=\"submit\">Add Item</Button>\n          </div>\n\n          <Button className='button' type=\"submit\" onClick={props.completed}>\n          View Completed Items\n        </Button>\n        </FormGroup>\n      </form>\n    </Card>\n  );\n}","import React from \"react\";\nimport { Button, Card, Elevation } from \"@blueprintjs/core\";\n\nconst Completecard = (props) => {\n  return (\n    <div>\n      {\" \"}\n      <Card className=\"mainItem2\">\n        <h3 className=\"list\">Items List</h3>\n        {props.arrayComplete.map((item) => (\n          <Card\n            className=\"listCard\"\n            interactive={true}\n            elevation={Elevation.THREE}\n            key={item.id}\n          >\n            <h3>\n              <b>{item.text} </b>\n            </h3>\n            <p>\n              <b>Assigned to</b> : {item.assignee}\n            </p>\n            <p>\n              <b>Difficulty</b> : {item.difficulty}\n            </p>\n            <Button\n              class=\"@ns-button\"\n              type=\"button\"\n              // intent=\"danger\"\n              className={\n                 \"bp3-intent-success\" \n              }\n              onClick={() => props.toggleComplete(item.id)}\n            >\n              Complete : True\n            </Button>\n          </Card>\n        ))}\n      </Card>\n    </div>\n  );\n};\n\nexport default Completecard;","import React, { useEffect, useState } from 'react';\nimport useForm from '../hooks/form';\nimport List from './List';\nimport { v4 as uuid } from 'uuid';\nimport Form from './Form';\nimport Completecard from './Completed';\n\nconst ToDo = () => {\n  const [list, setList] = useState([]);\n  const [incomplete, setIncomplete] = useState([]);\n  const { handleChange, handleSubmit, handleSubmit2 } = useForm(addItem);\n  const [completedItem, setComplete] = useState(false);\n  const [arrayComplete, setArrayComplete] = useState([]);\n  const [changeSet, setChangeSetting] = useState(false);\n\n\n  function addItem(item) {\n    item.id = uuid();\n    item.complete = false;\n    setList([...list, item]);\n  }\n  function changeSettingContext() {\n    setChangeSetting(true);\n  }\n\n  function deleteItem(id) {\n    const items = list.filter((item) => item.id !== id);\n    setList(items);\n  }\n\n  function toggleComplete(id) {\n    const items = list.map((item) => {\n      if (item.id == id) {\n        item.complete = !item.complete;\n      }\n      return item;\n    });\n\n    setList(items);\n  }\n\n  useEffect(() => {\n    let incompleteCount = list.filter((item) => !item.complete);\n    setIncomplete(incompleteCount);\n    document.title = `To Do List: (${incomplete.length}) Pending`;\n  }, [list]);\n\n  const completed=()=>{\n\n    const arr=[];\n    list.map((ele)=>{\n      if (ele.complete){\n        arr.push(ele)\n      }\n    });\n    setComplete(true);\n    setArrayComplete(arr);\n    console.log(arr);\n\n  }\n\n  return (\n    <div className=\"main\">\n      <h3 id='h2'>To Do List Manager: ({incomplete.length}) To-Do | ({list.length - incomplete.length}) completed</h3>\n\n      <div className=\"mainCards\">\n        <Form\n          handleChange={handleChange}\n          handleSubmit={handleSubmit}\n          incomplete={incomplete}\n          completed={completed}\n          changeSettingContext={changeSettingContext}\n        />\n        <List\n        deleteItem={deleteItem}\n          incomplete={incomplete}\n          list={list}\n          toggleComplete={toggleComplete}\n        />\n        {completedItem && (\n        <Completecard completed={completed} arrayComplete={arrayComplete} toggleComplete={toggleComplete} />\n      )}\n         {changeSet && (\n        <FormSetting handleSubmit={handleSubmit} handleChange={handleChange} />)}\n      </div>\n    </div>\n  );\n};\n\nexport default ToDo;","import React, { useContext, useState, useEffect } from 'react';\nimport { FormGroup, InputGroup } from '@blueprintjs/core';\nimport { settingsContext } from \"./settings\";\n\nexport default function Form() {\n  const settings = useContext(settingsContext);\n\n  const changeNumberOfpage = (e) => {\n    e.preventDefault();\n    let itemsPerPage = e.target.value;\n    let obj = {\n      itemsPerPage: itemsPerPage,\n    };\n    setItem(obj);\n  };\n  function setItem(obj) {\n    localStorage.setItem(\"Form\", JSON.stringify(obj));\n  }\n\n\n\n  return (\n    <>\n      <div>\n        <h2>TO DO Settings : </h2>\n        <form>\n          <FormGroup label='Choose No. Of Items Displayed Per Page:' labelFor='text-input'>\n            <InputGroup id='text-input' placeholder='# of items/page' type='Number' onChange={changeNumberOfpage} name='items'min='1' max='10' />\n          </FormGroup>\n          <FormGroup helperText='' label='Show Completed :' labelFor='text-input' labelInfo=''>\n            <div className='bp3-html-select .modifier'>\n              <select name='completed' value={settings.show} onChange={changeNumberOfpage}>\n                <option value='true'>True</option>\n                <option value='false'>False</option>\n              </select>\n              <span className='bp3-icon bp3-icon-double-caret-vertical'></span>\n            </div>\n          </FormGroup>\n        </form>\n      </div>\n    </>\n  );\n}","import React from 'react';\nimport { Navbar } from \"@blueprintjs/core\";\n\nexport default function Header() {\n    return (\n        <>\n        \n        <Navbar className=\"header\">\n        <br></br>\n        <Navbar.Group top-margin={10 }>\n            <Navbar.Heading ><h2>home</h2></Navbar.Heading>\n            <Navbar.Divider />\n        </Navbar.Group>\n    </Navbar>\n    </>\n    );\n  }","import React from 'react';\n\nfunction Footer(){\n    return <footer>&copy; Shams Alsaraireh</footer>;\n}\n\n\nexport default Footer;","import React from 'react';\nimport ToDo from './components/todo';\nimport SettingsContext from './context/settings/settings';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Form from './context/settings/Form';\nimport Header from './components/Header';\nimport Footer from './components/Footer';\nimport './app.scss';\n\nfunction App() {\n    return (\n      <>\n     \n        <Header />\n          <SettingsContext>\n            <ToDo />\n            <Form />\n          </SettingsContext>\n        <Footer />\n     \n    </>\n    );\n  }\n  \nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './app.js';\n\nclass Main extends React.Component {\n  render() {\n    return <App />;\n  }\n}\n\nconst rootElement = document.getElementById('root');\nReactDOM.render(<Main />, rootElement);"],"sourceRoot":""}